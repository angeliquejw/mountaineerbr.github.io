##
## bitcoin.conf configuration file. Lines beginning with # are comments.
##
#from bitcoind example (skel)
#https://github.com/bitcoin/bitcoin/blob/master/share/examples/bitcoin.conf

#Instruction to reserve a local ip address and forward port 8333:
#https://bitcoin.org/en/full-node#port-forwarding
#Example configuration for my modem:
#Get current local ip and mac addresses of my LOCAL_DEVICE (my laptop):
#% ip a  #copy the `inet' address
#Set a static IP for a LOCAL_DEVICE:
#LAN Setup > Client list > Add a Reserved IP
#Port forwarding:
#modem settings > firewall > virtual server/port forwarding
#bitcoin daemon,8333-8333(inbound port),TCP,LOCAL_DEVICE_IP,8333-8333(local port)

#Specify path to read-only configuration file. Relative paths
#will be prefixed by datadir location. (default: bitcoin.conf)
##conf=This configuration is command line only

#datadir
datadir=/media/primary/blockchain

#by default, bitcoin core only stores complete transaction data for utxos 
#and your own transactions, so the rpc may fail on historic transactions
#unless you use the non-default `txindex=1`
txindex=1

#disable wallet modes
#disablewallet=1

#set rpc user
rpcuser=Luladrao
rpcpassword=Chatonildo

#Whether to save the mempool on shutdown and load on restart (default: 1)
#persistmempool=0

#Keep the transaction memory pool below <n>  megabytes  (default: 300)
#maxmempool=666

#Maximum  database cache size <n> MiB (4 to 16384, default: 450).
#In addition, unused mempool memory is shared for this cache (see -maxmempool).
#dbcache=300

#Tries to keep outbound traffic under the given  target (in  MiB per 24h).
#(default: 0)
#maxuploadtarget=5500
#``By contributing some of your bandwidth—typically about 100 GB upload a month—you can help support Bitcoin''
#https://bitcoin.org/en/bitcoin-core/features/network-support
#``Minimum recommended: Upload: 5 GB/day (150 GB/month)''
#https://bitcoin.org/en/bitcoin-core/features/requirements

##Using tor with node
#Add the user running bitcoind to tor group
#<https://en.bitcoin.it/wiki/Setting_up_a_Tor_hidden_service>
#<https://bitcointalk.org/index.php?topic=3058841.0>
#<https://github.com/bitcoin/bitcoin/blob/master/doc/tor.md>
#Add the following to your .torrc (make a copy of /etc/tor/torrc):
##ControlPort 9051
##CookieAuthentication 1
##CookieAuthFileGroupReadable 1
##DataDirectoryGroupReadable 1
#If you want to only use tor, add to bitcoin.conf:
##proxy:127.0.0.1:9050  #on windows, possibly 127.0.0.1:9150
##listen=1
##bind=127.0.0.1
##externalip=<yourtordomain.onion>
##onlynet=onion

#RPC call with curl:
#curl --user me --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getrawtransaction", "params": ["a73d9a19c87a7aa9004975e25ba033101b347e864ba26ce9ff6be6a5bc24dc94", true] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/

#sets the depth of the work queue to service rpc calls, the default is 16
#rpcworkqueue=1024
#https://github.com/bitpay/bitcore-node/issues/463
#if you need more then 16 workers and and an http timeout > 30 you are very likely
#debugging or running in a HA/HL environment. I think it's that we hide the
#help of those expert/debug commands behind -help-debug (just an expert option).
#https://github.com/bitcoin/bitcoin/issues/11574

#set the number of threads to service rpc calls (default: 4)
#rpcthreads=<n>
#is the number of independent api requests that can be processed in parallel.
#in reality however there are many locks inside the product that means you 
#won't see much performance benefit with a value above 2.
#https://www.multichain.com/qa/8892/multichain-rpc-options

# Network-related settings:

# Note that if you use testnet or regtest, particularly with the options
# addnode, connect, port, bind, rpcport, rpcbind or wallet, you will also
# want to read "[Sections]" further down.

# Run on the test network instead of the real bitcoin network.
#testnet=0

# Run a regression test network
#regtest=0

#only one network
#onlynet=onion

# Listening mode, enabled by default except when 'connect' is being used
# Accept  connections  from  outside
listen=1
# listenonion defaults to 1
listenonion=1

# Port on which to listen for connections (default: 8333, testnet: 18333, regtest: 18444)
#port=

# Maximum number of inbound+outbound connections.
#maxconnections=8

# Connect via a SOCKS5 proxy
proxy=127.0.0.1:9050

# Bind to given address and always listen on it. Use [host]:port notation for IPv6
#bind=127.0.0.1

# Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6
#whitebind=<addr>

#Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)
discover=1

#Use UPnP to map the listening port (default: 0)
upnp=1

# Specify your own public address
#externalip=
#externalip=

#Use separate SOCKS5 proxy to reach peers via Tor onion services,
#set -noonion to disable (default: -proxy), does not net setting if the
#same as proxy
#onion=127.0.0.1:9050
#<https://en.bitcoin.it/wiki/Setting_up_a_Tor_hidden_service>

##############################################################
##            Quick Primer on addnode vs connect            ##
##  Let's say for instance you use addnode=4.2.2.4          ##
##  addnode will connect you to and tell you about the      ##
##    nodes connected to 4.2.2.4.  In addition it will tell ##
##    the other nodes connected to it that you exist so     ##
##    they can connect to you.                              ##
##  connect will not do the above when you 'connect' to it. ##
##    It will *only* connect you to 4.2.2.4 and no one else.##
##                                                          ##
##  So if you're behind a firewall, or have other problems  ##
##  finding nodes, add some using 'addnode'.                ##
##                                                          ##
##  If you want to stay private, use 'connect' to only      ##
##  connect to "trusted" nodes.                             ##
##                                                          ##
##  If you run multiple nodes on a LAN, there's no need for ##
##  all of them to open lots of connections.  Instead       ##
##  'connect' them all to one node that is port forwarded   ##
##  and has lots of connections.                            ##
##       Thanks goes to [Noodle] on Freenode.               ##
##############################################################

# Use as many addnode= settings as you like to connect to specific peers
#addnode=69.164.218.197
#addnode=10.0.0.2:8333

# Alternatively use as many connect= settings as you like to connect ONLY to specific peers
#connect=69.164.218.197
#connect=10.0.0.1:8333

#
# JSON-RPC options (for controlling a running Bitcoin/bitcoind process)
#

# server=1 tells Bitcoin-Qt and bitcoind to accept JSON-RPC commands
#server=0

# Bind to given address to listen for JSON-RPC connections.
# Refer to the manpage or bitcoind -help for further details.
#rpcbind=<addr>

# If no rpcpassword is set, rpc cookie auth is sought. The default `-rpccookiefile` name
# is .cookie and found in the `-datadir` being used for bitcoind. This option is typically used
# when the server and client are run as the same user.
#
# If not, you must set rpcuser and rpcpassword to secure the JSON-RPC API.
#
# The config option `rpcauth` can be added to server startup argument. It is set at initialization time
# using the output from the script in share/rpcauth/rpcauth.py after providing a username:
#
# ./share/rpcauth/rpcauth.py alice
# String to be appended to bitcoin.conf:
# rpcauth=alice:f7efda5c189b999524f151318c0c86$d5b51b3beffbc02b724e5d095828e0bc8b2456e9ac8757ae3211a5d9b16a22ae
# Your password:
# DONT_USE_THIS_YOU_WILL_GET_ROBBED_8ak1gI25KFTvjovL3gAM967mies3E=
#
# On client-side, you add the normal user/password pair to send commands:
#rpcuser=alice
#rpcpassword=DONT_USE_THIS_YOU_WILL_GET_ROBBED_8ak1gI25KFTvjovL3gAM967mies3E=
#
# You can even add multiple entries of these to the server conf file, and client can use any of them:
# rpcauth=bob:b2dd077cb54591a2f3139e69a897ac$4e71f08d48b4347cf8eff3815c0e25ae2e9a4340474079f55705f40574f4ec99

# How many seconds bitcoin will wait for a complete RPC HTTP request.
# after the HTTP connection is established.
#rpcclienttimeout=30

# By default, only RPC connections from localhost are allowed.
# Specify as many rpcallowip= settings as you like to allow connections from other hosts,
# either as a single IPv4/IPv6 or with a subnet specification.

# NOTE: opening up the RPC port to hosts outside your local trusted network is NOT RECOMMENDED,
# because the rpcpassword is transmitted over the network unencrypted.

# server=1 tells Bitcoin-Qt to accept JSON-RPC commands.
# it is also read by bitcoind to determine if RPC should be enabled
#rpcallowip=10.1.1.34/255.255.255.0
#rpcallowip=1.2.3.4/24
#rpcallowip=2001:db8:85a3:0:0:8a2e:370:7334/96

# Listen for RPC connections on this TCP port:
#rpcport=8332

# You can use Bitcoin or bitcoind to send commands to Bitcoin/bitcoind
# running on another host using this option:
#rpcconnect=127.0.0.1

# Wallet options

# Specify where to find wallet, lockfile and logs. If not present, those files will be
# created as new.
#wallet=</path/to/dir>

# Create transactions that have enough fees so they are likely to begin confirmation within n blocks (default: 6).
# This setting is over-ridden by the -paytxfee option.
#txconfirmtarget=n

# Pay a transaction fee every time you send bitcoins.
#paytxfee=0.000x

# Miscellaneous options

# Pre-generate this many public/private key pairs, so wallet backups will be valid for
# both prior transactions and several dozen future transactions.
#keypool=100

# Enable pruning to reduce storage requirements by deleting old blocks.
# This mode is incompatible with -txindex and -rescan.
# 0 = default (no pruning).
# 1 = allows manual pruning via RPC.
# >=550 = target to stay under in MiB.
#prune=550

# User interface options

# Start Bitcoin minimized
#min=1

# Minimize to the system tray
#minimizetotray=1

# [Sections]
# Most options apply to mainnet, testnet and regtest.
# If you want to confine an option to just one network, you should add it in the
# relevant section below.
# EXCEPTIONS: The options addnode, connect, port, bind, rpcport, rpcbind and wallet
# only apply to mainnet unless they appear in the appropriate section below.

# Options only for mainnet
[main]

# Options only for testnet
[test]

# Options only for regtest
[regtest]


#notes:
#listreceivedbyaddress can list all addresses
#(including watch-only) that haven't received:
#listreceivedbyaddress 0 true true
#https://bitcoin.stackexchange.com/questions/74932/list-imported-watch-only-adresses


